name: CI

permissions:
  contents: write  # allow auto-format job to push

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements.txt
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black isort flake8 mypy bandit[toml]
      - name: Auto-format (black & isort)
        run: |
          black .
          isort .
      - name: Commit formatting changes (push events only)
        if: github.event_name == 'push'
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          if [[ -n "$(git status --porcelain)" ]]; then
            if git log -1 --pretty=%B | grep -q 'ci: apply auto-formatting'; then
              echo "Previous commit was an auto-format commit; skipping to avoid loop."
            else
              echo "Formatting changes detected; committing..."
              git config user.name 'ci-bot'
              git config user.email 'ci-bot@users.noreply.github.com'
              git add .
              git commit -m 'ci: apply auto-formatting'
              git push origin HEAD:${GITHUB_REF#refs/heads/}
            fi
          else
            echo "No formatting changes to commit."
          fi
      - name: Static analysis (flake8/mypy)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
          mypy --ignore-missing-imports *.py || true
      - name: Pylint
        run: |
          # Install pylint if not already present (could be added to requirements/dev extras later)
          pip install --disable-pip-version-check --quiet pylint
          echo "Running pylint (excluding tests to phase in gradually)..."
          # Find project python files excluding tests directory and generated cache / build dirs
          PY_FILES=$(git ls-files '*.py' | grep -v '^tests/' || true)
          if [ -z "$PY_FILES" ]; then
            echo "No Python files detected for pylint run"
            exit 0
          fi
          # Run pylint errors-only for initial adoption phase (will widen categories later)
          pylint --errors-only $PY_FILES
      - name: Security scan (bandit)
        run: |
          bandit -r . -f txt || true
      - name: Tests with coverage
        env:
          GARTAN_USERNAME: ${{ secrets.GARTAN_USERNAME }}
          GARTAN_PASSWORD: ${{ secrets.GARTAN_PASSWORD }}
        run: |
          if [ -z "${GARTAN_USERNAME}" ] || [ -z "${GARTAN_PASSWORD}" ]; then
            echo "Warning: GARTAN_USERNAME / GARTAN_PASSWORD secrets not set. Tests that require credentials may fail." >&2
          fi
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  docker:
    name: Build & Push Docker
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/gartan_scraper_bot:latest
            ${{ secrets.DOCKER_USERNAME }}/gartan_scraper_bot:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/gartan_scraper_bot:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/gartan_scraper_bot:buildcache,mode=max
      - name: Smoke test container
        run: |
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/gartan_scraper_bot:latest python --version
