name: CI

permissions:
  contents: write  # allow auto-format job to push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements.txt
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black isort flake8 mypy bandit[toml]
      - name: Auto-format (black & isort)
        run: |
          black .
          isort .
      - name: Commit formatting changes (push events only)
        if: github.event_name == 'push'
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          if [[ -n "$(git status --porcelain)" ]]; then
            if git log -1 --pretty=%B | grep -q 'ci: apply auto-formatting'; then
              echo "Previous commit was an auto-format commit; skipping to avoid loop."
            else
              echo "Formatting changes detected; committing..."
              git config user.name 'ci-bot'
              git config user.email 'ci-bot@users.noreply.github.com'
              git add .
              git commit -m 'ci: apply auto-formatting'
              git push origin HEAD:${GITHUB_REF#refs/heads/}
            fi
          else
            echo "No formatting changes to commit."
          fi
      - name: Static analysis (flake8/mypy)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
          mypy --ignore-missing-imports *.py || true
      - name: Pylint (full)
        run: |
          pip install --disable-pip-version-check --quiet pylint
          echo "Running full pylint (excluding tests for now)..."
          PY_FILES=$(git ls-files '*.py' | grep -v '^tests/' || true)
          if [ -z "$PY_FILES" ]; then
            echo "No Python files detected for pylint run"
            exit 0
          fi
          pylint $PY_FILES
      - name: Security scan (bandit)
        run: |
          bandit -r . -f txt || true
      - name: Tests with coverage
        env:
          GARTAN_USERNAME: ${{ secrets.GARTAN_USERNAME }}
          GARTAN_PASSWORD: ${{ secrets.GARTAN_PASSWORD }}
        run: |
          if [ -z "${GARTAN_USERNAME}" ] || [ -z "${GARTAN_PASSWORD}" ]; then
            echo "Warning: GARTAN_USERNAME / GARTAN_PASSWORD secrets not set. Tests that require credentials may fail." >&2
          fi
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  docker:
    name: Build & Push Multi-Arch Docker
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/gartan_scraper_bot
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            
      - name: Build and push multi-platform
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max