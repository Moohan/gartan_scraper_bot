#!/bin/bash
# Pre-push hook for Gartan Scraper Bot
# Runs comprehensive tests and validations before pushing.
# Adds explicit timeouts & robust cleanup to avoid hanging pushes.

set -euo pipefail

DOCKER_BUILD_TIMEOUT=${DOCKER_BUILD_TIMEOUT:-300}   # seconds (5m default)
API_START_TIMEOUT=${API_START_TIMEOUT:-10}

echo "üöÄ Running pre-push checks (timeouts: docker=${DOCKER_BUILD_TIMEOUT}s api=${API_START_TIMEOUT}s)..."

# Ensure cleanup always happens
cleanup() {
    if [[ -n "${server_pid:-}" ]]; then
        kill "$server_pid" 2>/dev/null || true
    fi
}
trap cleanup EXIT INT TERM

# Ensure logs directory exists early for redirections
mkdir -p logs

# Run all tests including integration tests
echo "üß™ Running comprehensive test suite..."
python -m pytest tests/ -v --cov=. --cov-report=term-missing || {
    echo "‚ùå Comprehensive tests failed"
    exit 1
}

# Check that API server can start
echo "üåê Testing API server startup (timeout ${API_START_TIMEOUT}s)..."
python api_server.py > logs/prepush_api_start.log 2>&1 &
server_pid=$!

# Poll /health until success or timeout
start_ts=$(date +%s)
health_ok=0
elapsed=0
while true; do
    if curl -fsS http://localhost:5000/health > /dev/null 2>&1; then
    health_ok=1
    now=$(date +%s)
    elapsed=$(( now - start_ts ))
    break
    fi
    now=$(date +%s)
    elapsed=$(( now - start_ts ))
    if (( elapsed >= API_START_TIMEOUT )); then
        break
    fi
    sleep 1
done

if [[ $health_ok -eq 1 ]]; then
    echo "‚úÖ API server starts successfully (ready in ${elapsed}s)"
else
    echo "‚ùå API server failed to become ready within ${API_START_TIMEOUT}s"
    echo "---- api_server log (last 60 lines) ----"
    tail -n 60 logs/prepush_api_start.log 2>/dev/null || echo "(no log captured)"
    kill $server_pid 2>/dev/null || true
    exit 1
fi

# Stop API server (trap will also catch if earlier fail)
kill $server_pid 2>/dev/null || true

# Check Docker build (if Docker is available)
if command -v docker &> /dev/null; then
    echo "üê≥ Testing Docker build (timeout ${DOCKER_BUILD_TIMEOUT}s)..."
    build_log="logs/prepush_docker_build.log"
    mkdir -p logs
        # Use timeout if available; otherwise manual elapsed check
        if command -v timeout >/dev/null 2>&1; then
                if ! timeout ${DOCKER_BUILD_TIMEOUT}s docker build --pull --progress=plain -t gartan-scraper-test . > "$build_log" 2>&1; then
                    status=$?
                    echo "‚ùå Docker build failed or timed out (exit=$status). Last 60 lines:" >&2
                    tail -n 60 "$build_log" || true
                    exit 1
                fi
        else
                build_start=$(date +%s)
                if ! docker build --pull --progress=plain -t gartan-scraper-test . > "$build_log" 2>&1; then
                    status=$?
                    echo "‚ùå Docker build failed (exit=$status). Last 60 lines:" >&2
                    tail -n 60 "$build_log" || true
                    exit 1
                fi
                build_end=$(date +%s)
                build_elapsed=$(( build_end - build_start ))
                if (( build_elapsed > DOCKER_BUILD_TIMEOUT )); then
                    echo "‚ö†Ô∏è  Docker build exceeded suggested timeout (${build_elapsed}s > ${DOCKER_BUILD_TIMEOUT}s)" >&2
                fi
        fi
    echo "‚úÖ Docker build successful"
    docker rmi gartan-scraper-test > /dev/null 2>&1 || true
else
    echo "‚ÑπÔ∏è  Docker not found; skipping image build test"
fi

# Check for large files
echo "üìè Checking for large files..."
large_files=$(git ls-files | xargs ls -l | awk '$5 > 1048576 {print $9, $5}' || true)
if [ -n "$large_files" ]; then
    echo "‚ö†Ô∏è  Warning: Large files detected (>1MB):"
    echo "$large_files"
    echo "Consider using Git LFS for large files"
fi

# Check for secrets in code
echo "üîí Checking for potential secrets..."
secret_patterns=("password" "secret" "token" "api_key")
for pattern in "${secret_patterns[@]}"; do
    matches=$(git diff origin/main --name-only | xargs grep -il "$pattern" 2>/dev/null | grep -v ".env.example" || true)
    if [ -n "$matches" ]; then
        echo "‚ö†Ô∏è  Warning: Potential secrets found in files containing '$pattern':"
        echo "$matches"
        echo "Please review these files to ensure no secrets are committed"
    fi
done

echo "‚úÖ All pre-push checks passed!"
